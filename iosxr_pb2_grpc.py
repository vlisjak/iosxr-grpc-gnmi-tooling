# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import iosxr_pb2 as iosxr__pb2

GRPC_GENERATED_VERSION = "1.67.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in iosxr_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class gRPCConfigOperStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetConfig = channel.unary_stream(
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/GetConfig",
            request_serializer=iosxr__pb2.ConfigGetArgs.SerializeToString,
            response_deserializer=iosxr__pb2.ConfigGetReply.FromString,
            _registered_method=True,
        )
        self.MergeConfig = channel.unary_unary(
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/MergeConfig",
            request_serializer=iosxr__pb2.ConfigArgs.SerializeToString,
            response_deserializer=iosxr__pb2.ConfigReply.FromString,
            _registered_method=True,
        )
        self.DeleteConfig = channel.unary_unary(
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/DeleteConfig",
            request_serializer=iosxr__pb2.ConfigArgs.SerializeToString,
            response_deserializer=iosxr__pb2.ConfigReply.FromString,
            _registered_method=True,
        )
        self.RemoveConfig = channel.unary_unary(
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/RemoveConfig",
            request_serializer=iosxr__pb2.ConfigArgs.SerializeToString,
            response_deserializer=iosxr__pb2.ConfigReply.FromString,
            _registered_method=True,
        )
        self.ReplaceConfig = channel.unary_unary(
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/ReplaceConfig",
            request_serializer=iosxr__pb2.ConfigArgs.SerializeToString,
            response_deserializer=iosxr__pb2.ConfigReply.FromString,
            _registered_method=True,
        )
        self.CliConfig = channel.unary_unary(
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CliConfig",
            request_serializer=iosxr__pb2.CliConfigArgs.SerializeToString,
            response_deserializer=iosxr__pb2.CliConfigReply.FromString,
            _registered_method=True,
        )
        self.CommitReplace = channel.unary_unary(
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitReplace",
            request_serializer=iosxr__pb2.CommitReplaceArgs.SerializeToString,
            response_deserializer=iosxr__pb2.CommitReplaceReply.FromString,
            _registered_method=True,
        )
        self.CommitConfig = channel.unary_unary(
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitConfig",
            request_serializer=iosxr__pb2.CommitArgs.SerializeToString,
            response_deserializer=iosxr__pb2.CommitReply.FromString,
            _registered_method=True,
        )
        self.ConfigDiscardChanges = channel.unary_unary(
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/ConfigDiscardChanges",
            request_serializer=iosxr__pb2.DiscardChangesArgs.SerializeToString,
            response_deserializer=iosxr__pb2.DiscardChangesReply.FromString,
            _registered_method=True,
        )
        self.GetOper = channel.unary_stream(
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/GetOper",
            request_serializer=iosxr__pb2.GetOperArgs.SerializeToString,
            response_deserializer=iosxr__pb2.GetOperReply.FromString,
            _registered_method=True,
        )
        self.CreateSubs = channel.unary_stream(
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CreateSubs",
            request_serializer=iosxr__pb2.CreateSubsArgs.SerializeToString,
            response_deserializer=iosxr__pb2.CreateSubsReply.FromString,
            _registered_method=True,
        )
        self.GetProtoFile = channel.unary_stream(
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/GetProtoFile",
            request_serializer=iosxr__pb2.GetProtoFileArgs.SerializeToString,
            response_deserializer=iosxr__pb2.GetProtoFileReply.FromString,
            _registered_method=True,
        )


class gRPCConfigOperServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetConfig(self, request, context):
        """Configuration related commands"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MergeConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RemoveConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ReplaceConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CliConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CommitReplace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CommitConfig(self, request, context):
        """Do we need implicit or explicit commit"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ConfigDiscardChanges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetOper(self, request, context):
        """Get only returns oper data"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CreateSubs(self, request, context):
        """Get Telemetry Data"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetProtoFile(self, request, context):
        """Get Proto File"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_gRPCConfigOperServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetConfig": grpc.unary_stream_rpc_method_handler(
            servicer.GetConfig,
            request_deserializer=iosxr__pb2.ConfigGetArgs.FromString,
            response_serializer=iosxr__pb2.ConfigGetReply.SerializeToString,
        ),
        "MergeConfig": grpc.unary_unary_rpc_method_handler(
            servicer.MergeConfig,
            request_deserializer=iosxr__pb2.ConfigArgs.FromString,
            response_serializer=iosxr__pb2.ConfigReply.SerializeToString,
        ),
        "DeleteConfig": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteConfig,
            request_deserializer=iosxr__pb2.ConfigArgs.FromString,
            response_serializer=iosxr__pb2.ConfigReply.SerializeToString,
        ),
        "RemoveConfig": grpc.unary_unary_rpc_method_handler(
            servicer.RemoveConfig,
            request_deserializer=iosxr__pb2.ConfigArgs.FromString,
            response_serializer=iosxr__pb2.ConfigReply.SerializeToString,
        ),
        "ReplaceConfig": grpc.unary_unary_rpc_method_handler(
            servicer.ReplaceConfig,
            request_deserializer=iosxr__pb2.ConfigArgs.FromString,
            response_serializer=iosxr__pb2.ConfigReply.SerializeToString,
        ),
        "CliConfig": grpc.unary_unary_rpc_method_handler(
            servicer.CliConfig,
            request_deserializer=iosxr__pb2.CliConfigArgs.FromString,
            response_serializer=iosxr__pb2.CliConfigReply.SerializeToString,
        ),
        "CommitReplace": grpc.unary_unary_rpc_method_handler(
            servicer.CommitReplace,
            request_deserializer=iosxr__pb2.CommitReplaceArgs.FromString,
            response_serializer=iosxr__pb2.CommitReplaceReply.SerializeToString,
        ),
        "CommitConfig": grpc.unary_unary_rpc_method_handler(
            servicer.CommitConfig,
            request_deserializer=iosxr__pb2.CommitArgs.FromString,
            response_serializer=iosxr__pb2.CommitReply.SerializeToString,
        ),
        "ConfigDiscardChanges": grpc.unary_unary_rpc_method_handler(
            servicer.ConfigDiscardChanges,
            request_deserializer=iosxr__pb2.DiscardChangesArgs.FromString,
            response_serializer=iosxr__pb2.DiscardChangesReply.SerializeToString,
        ),
        "GetOper": grpc.unary_stream_rpc_method_handler(
            servicer.GetOper,
            request_deserializer=iosxr__pb2.GetOperArgs.FromString,
            response_serializer=iosxr__pb2.GetOperReply.SerializeToString,
        ),
        "CreateSubs": grpc.unary_stream_rpc_method_handler(
            servicer.CreateSubs,
            request_deserializer=iosxr__pb2.CreateSubsArgs.FromString,
            response_serializer=iosxr__pb2.CreateSubsReply.SerializeToString,
        ),
        "GetProtoFile": grpc.unary_stream_rpc_method_handler(
            servicer.GetProtoFile,
            request_deserializer=iosxr__pb2.GetProtoFileArgs.FromString,
            response_serializer=iosxr__pb2.GetProtoFileReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "IOSXRExtensibleManagabilityService.gRPCConfigOper", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "IOSXRExtensibleManagabilityService.gRPCConfigOper", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class gRPCConfigOper(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetConfig(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/GetConfig",
            iosxr__pb2.ConfigGetArgs.SerializeToString,
            iosxr__pb2.ConfigGetReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def MergeConfig(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/MergeConfig",
            iosxr__pb2.ConfigArgs.SerializeToString,
            iosxr__pb2.ConfigReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DeleteConfig(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/DeleteConfig",
            iosxr__pb2.ConfigArgs.SerializeToString,
            iosxr__pb2.ConfigReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def RemoveConfig(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/RemoveConfig",
            iosxr__pb2.ConfigArgs.SerializeToString,
            iosxr__pb2.ConfigReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ReplaceConfig(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/ReplaceConfig",
            iosxr__pb2.ConfigArgs.SerializeToString,
            iosxr__pb2.ConfigReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CliConfig(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CliConfig",
            iosxr__pb2.CliConfigArgs.SerializeToString,
            iosxr__pb2.CliConfigReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CommitReplace(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitReplace",
            iosxr__pb2.CommitReplaceArgs.SerializeToString,
            iosxr__pb2.CommitReplaceReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CommitConfig(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitConfig",
            iosxr__pb2.CommitArgs.SerializeToString,
            iosxr__pb2.CommitReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ConfigDiscardChanges(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/ConfigDiscardChanges",
            iosxr__pb2.DiscardChangesArgs.SerializeToString,
            iosxr__pb2.DiscardChangesReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetOper(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/GetOper",
            iosxr__pb2.GetOperArgs.SerializeToString,
            iosxr__pb2.GetOperReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CreateSubs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CreateSubs",
            iosxr__pb2.CreateSubsArgs.SerializeToString,
            iosxr__pb2.CreateSubsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetProtoFile(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/IOSXRExtensibleManagabilityService.gRPCConfigOper/GetProtoFile",
            iosxr__pb2.GetProtoFileArgs.SerializeToString,
            iosxr__pb2.GetProtoFileReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class gRPCExecStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ShowCmdTextOutput = channel.unary_stream(
            "/IOSXRExtensibleManagabilityService.gRPCExec/ShowCmdTextOutput",
            request_serializer=iosxr__pb2.ShowCmdArgs.SerializeToString,
            response_deserializer=iosxr__pb2.ShowCmdTextReply.FromString,
            _registered_method=True,
        )
        self.ShowCmdJSONOutput = channel.unary_stream(
            "/IOSXRExtensibleManagabilityService.gRPCExec/ShowCmdJSONOutput",
            request_serializer=iosxr__pb2.ShowCmdArgs.SerializeToString,
            response_deserializer=iosxr__pb2.ShowCmdJSONReply.FromString,
            _registered_method=True,
        )
        self.ActionJSON = channel.unary_stream(
            "/IOSXRExtensibleManagabilityService.gRPCExec/ActionJSON",
            request_serializer=iosxr__pb2.ActionJSONArgs.SerializeToString,
            response_deserializer=iosxr__pb2.ActionJSONReply.FromString,
            _registered_method=True,
        )


class gRPCExecServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ShowCmdTextOutput(self, request, context):
        """Exec commands"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ShowCmdJSONOutput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ActionJSON(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_gRPCExecServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ShowCmdTextOutput": grpc.unary_stream_rpc_method_handler(
            servicer.ShowCmdTextOutput,
            request_deserializer=iosxr__pb2.ShowCmdArgs.FromString,
            response_serializer=iosxr__pb2.ShowCmdTextReply.SerializeToString,
        ),
        "ShowCmdJSONOutput": grpc.unary_stream_rpc_method_handler(
            servicer.ShowCmdJSONOutput,
            request_deserializer=iosxr__pb2.ShowCmdArgs.FromString,
            response_serializer=iosxr__pb2.ShowCmdJSONReply.SerializeToString,
        ),
        "ActionJSON": grpc.unary_stream_rpc_method_handler(
            servicer.ActionJSON,
            request_deserializer=iosxr__pb2.ActionJSONArgs.FromString,
            response_serializer=iosxr__pb2.ActionJSONReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "IOSXRExtensibleManagabilityService.gRPCExec", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "IOSXRExtensibleManagabilityService.gRPCExec", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class gRPCExec(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ShowCmdTextOutput(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/IOSXRExtensibleManagabilityService.gRPCExec/ShowCmdTextOutput",
            iosxr__pb2.ShowCmdArgs.SerializeToString,
            iosxr__pb2.ShowCmdTextReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ShowCmdJSONOutput(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/IOSXRExtensibleManagabilityService.gRPCExec/ShowCmdJSONOutput",
            iosxr__pb2.ShowCmdArgs.SerializeToString,
            iosxr__pb2.ShowCmdJSONReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ActionJSON(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/IOSXRExtensibleManagabilityService.gRPCExec/ActionJSON",
            iosxr__pb2.ActionJSONArgs.SerializeToString,
            iosxr__pb2.ActionJSONReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class OpenConfiggRPCStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeTelemetry = channel.unary_stream(
            "/IOSXRExtensibleManagabilityService.OpenConfiggRPC/SubscribeTelemetry",
            request_serializer=iosxr__pb2.SubscribeRequest.SerializeToString,
            response_deserializer=iosxr__pb2.SubscribeResponse.FromString,
            _registered_method=True,
        )
        self.UnSubscribeTelemetry = channel.unary_unary(
            "/IOSXRExtensibleManagabilityService.OpenConfiggRPC/UnSubscribeTelemetry",
            request_serializer=iosxr__pb2.CancelSubscribeReq.SerializeToString,
            response_deserializer=iosxr__pb2.SubscribeResponse.FromString,
            _registered_method=True,
        )
        self.GetModels = channel.unary_unary(
            "/IOSXRExtensibleManagabilityService.OpenConfiggRPC/GetModels",
            request_serializer=iosxr__pb2.GetModelsInput.SerializeToString,
            response_deserializer=iosxr__pb2.GetModelsOutput.FromString,
            _registered_method=True,
        )


class OpenConfiggRPCServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubscribeTelemetry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UnSubscribeTelemetry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetModels(self, request, context):
        """get-models rpc implementation per
        github.com/openconfig/public/blob/master/release/models/rpc/openconfig-rpc.yang
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_OpenConfiggRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "SubscribeTelemetry": grpc.unary_stream_rpc_method_handler(
            servicer.SubscribeTelemetry,
            request_deserializer=iosxr__pb2.SubscribeRequest.FromString,
            response_serializer=iosxr__pb2.SubscribeResponse.SerializeToString,
        ),
        "UnSubscribeTelemetry": grpc.unary_unary_rpc_method_handler(
            servicer.UnSubscribeTelemetry,
            request_deserializer=iosxr__pb2.CancelSubscribeReq.FromString,
            response_serializer=iosxr__pb2.SubscribeResponse.SerializeToString,
        ),
        "GetModels": grpc.unary_unary_rpc_method_handler(
            servicer.GetModels,
            request_deserializer=iosxr__pb2.GetModelsInput.FromString,
            response_serializer=iosxr__pb2.GetModelsOutput.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "IOSXRExtensibleManagabilityService.OpenConfiggRPC", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "IOSXRExtensibleManagabilityService.OpenConfiggRPC", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class OpenConfiggRPC(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubscribeTelemetry(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/IOSXRExtensibleManagabilityService.OpenConfiggRPC/SubscribeTelemetry",
            iosxr__pb2.SubscribeRequest.SerializeToString,
            iosxr__pb2.SubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def UnSubscribeTelemetry(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/IOSXRExtensibleManagabilityService.OpenConfiggRPC/UnSubscribeTelemetry",
            iosxr__pb2.CancelSubscribeReq.SerializeToString,
            iosxr__pb2.SubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetModels(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/IOSXRExtensibleManagabilityService.OpenConfiggRPC/GetModels",
            iosxr__pb2.GetModelsInput.SerializeToString,
            iosxr__pb2.GetModelsOutput.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
